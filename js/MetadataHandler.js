// Generated by CoffeeScript 1.6.3
/* example metadata
  {
    "id": "f25d7eff-8859-49ed-85e9-e7c1f92bc111",
    "published": "2014-06-05T13:15:30Z",
    "actor":
    {
      "objectType": "person",
      "id": "f25d7eff-8859-49ed-85e9-e7c1f92bc334",
      "displayName": "anonymized"
    },
    "target":
    {
      "objectType": "conceptMap",
      "id": "9383fbbe-e071-49b2-9770-46ddc4f8cd6e",
      "displayName": "unnamed concept map"
    },
    "generator":
    {
      "objectType": "application",
      "url": document.URL,
      "id": "04123e9e-14d0-447b-a851-805b9262d9a6",
      "displayName": "ut.tools.conceptmapper"
    },
    "provider":
    {
      "objectType": "ils",
      "url": "http://graasp.epfl.ch/metawidget/1/b387b6f...",
      "id": "0f8184db-53ba-4868-9208-896c3d7c25bb",
      "inquiryPhase": "Orientation"
      "inquiryPhaseId": "543e7058ab0f540000e5821c"
      "inquiryPhaseName": "MyOrientation"
      "displayName": "name-of-ils"
    }
  }
*/


/* example ils and space data
old graasp
//////////
ils:
	description: ""
	displayName: "ILS test"
	id: "19122"
	metadata: null
	objectId: 19122
	parentId: 934
	parentType: "@person"
	profileUrl: "http://graasp.epfl.ch/#item=space_19122"
	spacetype: "ils"
	updated: "2014-10-16T11:33:33+02:00"
	visibilityLevel: "public"

phase:
	description: "<div id="hypo-graasp-ch" class="wiki_widget"><iframe name="9190" src="http://graasp.epfl.ch/sharedapp/fb3f1a00319782d2b306b7d3920dbc62c83ae21c" width="800" height="600"></iframe></div>
	"displayName: "MyOrientation"
	id: "19123"
  // metadata might be null if it's a manually added space
	metadata: "{"type":"Orientation"}"
	objectId: 19123
	parentId: 19122
	parentType: "@space"
	profileUrl: "http://graasp.epfl.ch/#item=space_19123"
	spacetype: "folder"
	updated: "2014-10-16T11:33:33+02:00"
	visibilityLevel: "public"


new graasp
//////////
ils:
	created: "2014-10-15T13:02:16.612Z"
	description: ""
	displayName: "test graasp-eu-library"
	id: "543e7058ab0f540000e58217"
	ilsRef: Object
		__v: 0
		_id: "543e70582e2c55fc49b62595"
		lang: "en"
		modified: "2014-10-15T13:02:16.680Z"
		spaceRef: "543e7058ab0f540000e58217"
		userRef: "5405e1e0da3a95cf9050e5f2"
  metadata: Object
		type: "ils"
	parentId: "5405e1ada5ecce255b4a7222"
	parentType: "@space"
	profileUrl: "http://graasp.eu/spaces/543e7058ab0f540000e58217"
	spaceType: "ils"
	updated: "2014-10-15T13:02:16.865Z"
	visibilityLevel: "public"

phase:
	created: "2014-10-15T13:02:16.678Z"
	description: "Welcome to the Orientation phase. You can describe here what students have to do in the Orientation phase."
	displayName: "MyOrientation"
	id: "543e7058ab0f540000e5821c"
	// metadata might be missing if it's a manually added phase space
  metadata:
		type: "Orientation"
	parentId: "543e7058ab0f540000e58217"
	parentType: "@space"
	profileUrl: "http://graasp.eu/spaces/543e7058ab0f540000e5821c"
	spaceType: "folder"
	updated: "2014-10-15T13:02:45.001Z"
	visibilityLevel: "public"
*/


(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.golab = window.golab || {};

  window.golab.ils = window.golab.ils || {};

  window.golab.ils.metadata = window.golab.ils.metadata || {};

  window.golab.ils.metadata.MetadataHandler = (function() {
    function MetadataHandler(metadata, cb) {
      var _this = this;
      console.log("Initializing MetadataHandler.");
      if (metadata) {
        this._metadata = JSON.parse(JSON.stringify(metadata));
      } else {
        throw "MetadataHandler needs an initial set of metadata at construction!";
      }
      setTimeout(function() {
        if (cb) {
          return cb(null, _this);
        }
      }, 0);
      console.log("MetadataHandler construction for " + this._metadata.generator.displayName + " complete. Using the following metadata:");
      console.log(this._metadata);
      this;
    }

    MetadataHandler.prototype.setMetadata = function(newMetadata) {
      this._metadata = JSON.parse(JSON.stringify(newMetadata));
      return this;
    };

    MetadataHandler.prototype.getMetadata = function() {
      return this._metadata;
    };

    MetadataHandler.prototype.setActor = function(newActor) {
      return this._metadata.actor = newActor;
    };

    MetadataHandler.prototype.getActor = function() {
      return this._metadata.actor;
    };

    MetadataHandler.prototype.getTarget = function() {
      return this._metadata.target;
    };

    MetadataHandler.prototype.setTarget = function(newTarget) {
      return this._metadata.target = JSON.parse(JSON.stringify(newTarget));
    };

    MetadataHandler.prototype.getGenerator = function() {
      return this._metadata.generator;
    };

    MetadataHandler.prototype.getProvider = function() {
      return this._metadata.provider;
    };

    MetadataHandler.prototype.getTargetDisplayName = function() {
      return this._metadata.target.displayName;
    };

    MetadataHandler.prototype.setTargetDisplayName = function(newName) {
      return this._metadata.target.displayName = newName;
    };

    MetadataHandler.prototype.setTargetId = function(newId) {
      return this._metadata.target.id = newId;
    };

    return MetadataHandler;

  })();

  window.golab.ils.metadata.GoLabMetadataHandler = (function(_super) {
    __extends(GoLabMetadataHandler, _super);

    function GoLabMetadataHandler(metadata, cb) {
      var error,
        _this = this;
      if (typeof osapi !== "undefined" && osapi !== null) {
        console.log("Retrieving metadata from osapi/ils.");
        try {
          if (!$.cookie) {
            throw "jquery.cookie library needs to be present before using the (GoLab)MetadataHandler (needed by ILS library).";
          }
          if (!ils) {
            throw "ILS library needs to be present before using the (GoLab)MetadataHandler.";
          }
          ils.getCurrentUser(function(userResult) {
            if (userResult.error) {
              console.warn("error reading username:");
              console.warn(userResult.error);
              metadata.actor.displayName = "unknown";
            } else {
              metadata.actor.displayName = userResult;
            }
            return ils.getIls(function(ils, phase) {
              var actorId;
              console.log("GoLab-MetadataHandler: ilsSpace, phaseSpace:");
              console.log(ils);
              console.log(phase);
              if (ils.objectId != null) {
                metadata.provider.objectType = ils.spaceType;
                metadata.provider.id = ils.id;
                metadata.provider.displayName = ils.displayName;
                metadata.provider.url = ils.profileUrl;
                if ((phase != null) && phase.spaceType === "folder") {
                  console.log("MetadataHandler: old Graasp, phase space.");
                  metadata.generator.url = gadgets.util.getUrlParameters().url;
                  if (phase.metadata) {
                    metadata.provider.inquiryPhase = JSON.parse(phase.metadata).type;
                  } else {
                    metadata.provider.inquiryPhase = "unknown";
                  }
                } else {
                  console.log("MetadataHandler: old Graasp, ILS space.");
                  metadata.provider.inquiryPhase = "ils";
                  metadata.generator = metadata.provider;
                  metadata.target = metadata.provider;
                }
              } else {
                metadata.provider.objectType = ils.spaceType;
                metadata.provider.id = ils.id;
                metadata.provider.displayName = ils.displayName;
                metadata.provider.url = ils.profileUrl;
                if ((phase != null) && phase.spaceType === "folder") {
                  console.log("MetadataHandler: new Graasp, phase space.");
                  metadata.generator.url = gadgets.util.getUrlParameters().url;
                  if (phase.metadata) {
                    metadata.provider.inquiryPhase = phase.metadata.type;
                    metadata.provider.inquiryPhaseId = phase.id;
                    metadata.provider.inquiryPhaseName = phase.displayName;
                  } else {
                    metadata.provider.inquiryPhase = "unknown";
                    metadata.provider.inquiryPhaseId = "unknown";
                    metadata.provider.inquiryPhaseName = "unknown";
                  }
                } else {
                  console.log("MetadataHandler: new Graasp, ILS space.");
                  metadata.provider.inquiryPhase = "ils";
                  metadata.generator = metadata.provider;
                  metadata.target = metadata.provider;
                }
              }
              actorId = metadata.actor.displayName + "@" + metadata.provider.id;
              metadata.actor.id = actorId;
              GoLabMetadataHandler.__super__.constructor.call(_this, metadata);
              return cb(null, _this);
            });
          });
        } catch (_error) {
          error = _error;
          console.warn("error during metadata retrieval:");
          console.warn(error);
        }
      } else {
        console.log("Running outside osapi/ils, using given metadata.");
        GoLabMetadataHandler.__super__.constructor.call(this, metadata);
        cb(null, this);
      }
    }

    return GoLabMetadataHandler;

  })(window.golab.ils.metadata.MetadataHandler);

  window.golab.ils.metadata.LocalMetadataHandler = (function(_super) {
    __extends(LocalMetadataHandler, _super);

    function LocalMetadataHandler(metadata, cb) {
      var actorId, getIdentifyingUrl, userNickname;
      getIdentifyingUrl = function() {
        var path, subPaths;
        path = window.location.pathname;
        subPaths = window.location.pathname.split("/");
        if (subPaths.length > 1) {
          switch (subPaths[1].toLocaleLowerCase()) {
            case "production":
              path = subPaths[1];
              break;
            case "experiments":
              path = subPaths[1];
              if (subPaths.length > 2) {
                path += "/" + subPaths[2];
              }
              break;
            default:
              path = "";
          }
        }
        return ("" + window.location.protocol + "//" + window.location.host + "/" + path).toLowerCase();
      };
      metadata.provider.id = getIdentifyingUrl();
      if ((this.getParameterFromUrl("provider") != null)) {
        metadata.provider.id = this.getParameterFromUrl("provider");
      }
      metadata.provider.displayName = "unnamed";
      userNickname = localStorage.getItem('goLabNickName');
      if (!userNickname) {
        if ((this.getParameterFromUrl("username") != null)) {
          userNickname = this.getParameterFromUrl("username");
        } else {
          userNickname = "unknown_user";
        }
      }
      metadata.actor.displayName = userNickname;
      actorId = metadata.actor.displayName + "@" + metadata.provider.id;
      metadata.actor.id = actorId;
      LocalMetadataHandler.__super__.constructor.call(this, metadata);
      cb(null, this);
    }

    LocalMetadataHandler.prototype.getParameterFromUrl = function(key) {
      var parameter, part, partParts, parts, queryPart, _i, _len;
      key = key.toLowerCase();
      parameter = null;
      queryPart = location.search.trim().toLowerCase();
      if (queryPart && queryPart[0] === "?") {
        parts = queryPart.substring(1).split("&");
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          partParts = part.split("=");
          if (partParts.length === 2 && partParts[0] === key) {
            parameter = partParts[1];
          }
        }
      }
      return parameter;
    };

    return LocalMetadataHandler;

  })(window.golab.ils.metadata.MetadataHandler);

}).call(this);

/*
//@ sourceMappingURL=MetadataHandler.map
*/
